/*init data***/
INSERT INTO organization (company_name, active)
VALUES
('IDA', true);

INSERT INTO role(name)
VALUES
('Admin'),
('User');

INSERT INTO IDA_USER (user_name, password, active, organization_id, user_source)
VALUES
('idaAdmin', 'b1d2e11b343783a14f6f8362b294bb22', true, (SELECT id FROM organization where company_name = 'IDA'), 'Database');

INSERT INTO users_roles (user_id, role_id)
VALUES
((SELECT id FROM IDA_USER where user_name = 'idaAdmin'),(SELECT id FROM role where name = 'Admin'));

INSERT INTO team (description, team_name, organization_id, access_all_bpm_server, access_all_selenium_server)
VALUES
('Default team is able to access all BPM servers and selenium grids.', 'default team', (SELECT id FROM organization where company_name = 'IDA'), 1, 1);

INSERT INTO permission (resource, operation, description)
VALUES
('Testing', 'T_VIEW', 'View/Export Test Project'),
('Testing', 'T_EDIT','Create/Edit/Synchronize/Delete/Run Test Project'),
('Testing', 'T_CUSTOM','Custom Record/Custom Java Command'),
('Checkstyle', 'CS_ALL','View/Run Checkstyle'),
('CodeReview', 'CR_ALL','View/Run CodeReview'),
('SupportingTool', 'ST_ALL','View/Run SupportingTool'),
('Configuration', 'CONF_BS_VIEW','View/Test BPM Servers'),
('Configuration', 'CONF_BS_EDIT','Create/Edit/Delete BPM Servers'),
('Configuration', 'CONF_BU_ALL','View/Create/Edit/Delete BPM Users'),
('Configuration', 'CONF_USER_ALL','View/Create/Edit/Delete User management'),
('Configuration', 'CONF_SG_ALL','View/Create/Edit/Delete Selenium Grid management'),
('Configuration', 'CONF_TEAM_ALL','View/Create/Edit/Delete Team management'),
('Configuration', 'CONF_USER_ROLE','Edit user role'),
('Configuration', 'CONF_SSHKEY_ALL','Create/Edit/Delete BPM Config SSH Key'),
('Configuration', 'CONF_LOG_LEVEL','Config logging Trace Level'),
('pipeline', 'P_VIEW','View Pipeline'),
('pipeline', 'P_EDIT','Edit steps except deployment Pipeline'),
('pipeline', 'P_CREATE_DELETE','Create Pipeline/Delete Pipeline'),
('pipeline', 'P_RUN','Run Pipeline'),
('pipeline', 'P_DEPLOY_ALL','Create/Edit/Delete deployment step and all stages'),
('pipeline', 'P_RUN_DEPLOY','Run Deployment Pipeline(with script/snapshot/deployment steps)'),
('pipeline', 'P_MANAGE_TEMPLATE','Create/Delete pipeline template'),
('CleanDiskCache', 'CLEAN_VIEW','View Clean Disk Cache'),
('CleanDiskCache', 'CLEAN_ALL','View/Operation Clean Disk Cache');


INSERT INTO roles_permissions (role_id, permission_id)
VALUES
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'T_VIEW')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'T_EDIT')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'T_CUSTOM')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CS_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CR_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'ST_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_BS_VIEW')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_BS_EDIT')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_BU_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_USER_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_SG_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_TEAM_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_LOG_LEVEL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_VIEW')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_EDIT')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_CREATE_DELETE')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_RUN')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_RUN_DEPLOY')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_DEPLOY_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'P_MANAGE_TEMPLATE')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CLEAN_VIEW')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CLEAN_ALL')),
((SELECT id FROM role where name = 'Admin'), (SELECT id FROM permission where operation = 'CONF_SSHKEY_ALL')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'T_VIEW')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'T_EDIT')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'CS_ALL')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'CR_ALL')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_VIEW')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_EDIT')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_CREATE_DELETE')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_RUN')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'CONF_BS_VIEW')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'CONF_BU_ALL')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_RUN_DEPLOY')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_DEPLOY_ALL')),
((SELECT id FROM role where name = 'User'), (SELECT id FROM permission where operation = 'P_MANAGE_TEMPLATE'));

INSERT INTO category (NAME, category_TYPE, DESCRIPTION, SORT, PARENT)
VALUES
('BPM', 'JAVA_COMMAND', 'BPM', 1, null),
('CM', 'JAVA_COMMAND', 'Case', 2, null),
('UI', 'JAVASCRIPT_COMMAND', 'UI', 3, null),
('BPMAssertion', 'JAVA_COMMAND', 'BPM Assertion', 4, null),
('CMAssertion', 'JAVA_COMMAND', 'Case Assertion', 5, null),
('UIAssertion', 'JAVASCRIPT_COMMAND', 'UI Assertion',6, null),
('Utility', 'JAVA_COMMAND', 'Utility',7, null),
('Custom', 'GROUP_COMMAND', 'Custom',8, null),
('GroupCase', 'GROUP_CASE', 'Group Case',9, null);

INSERT INTO command (NAME, DESCRIPTION, CATEGORY_ID, VERBALIZATION, TAKESCREENSHOT, DOC_LINK)
VALUES
('addContext', 'Add a key-value pair to list of context', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Add {{Parameters.value}} into list of system context with key {{Parameters.key}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#addcontext'),
('dateString', 'generate date string before/after number of days of today, negative number of days means before today, positive number of days means after today. If the key is not specified, then the default key is "DATE_STRING". You can use the date string by ${context.DATE_STRING}', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Save a date string into system context with key {{Parameters.key}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#datestring'),
('debug', 'Command for debug, case will stop at this step', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Debug {{Parameters.log}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#debug'),
('putContext', 'Put a key-value pair to context', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Save the value {{Parameters.value}} into system context with key {{Parameters.key}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#putcontext'),
('wait', 'Wait for specify seconds', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Wait for {{Parameters.time}} seconds.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#wait'),
('randomString', 'generate random string, use it by: ${context.RANDOM_STRING}', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Save a random string into system context with key RANDOM_STRING.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#randomstring'),
('randomNumber', 'generate random number, use it by: ${context.RANDOM_NUMBER}', (SELECT ID FROM category WHERE NAME = 'Utility'), 'Save a random number into system context with key RANDOM_NUMBER.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#randomnumber'),
('groupCase', 'group case', (SELECT ID FROM category WHERE NAME = 'GroupCase'), '', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#'),
('bpmFileDropzone', 'Upload file to BPM server by Dropzone control', (SELECT ID FROM category WHERE NAME = 'UI'), 'Upload file {{Parameters.value}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#bpmfiledropzone'),
('bpmFileUploader', 'Upload file to the BPM server', (SELECT ID FROM category WHERE NAME = 'UI'), 'Upload file {{Parameters.value}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#bpmfileuploader'),
('checkbox', 'Set checkbox value', (SELECT ID FROM category WHERE NAME = 'UI'), '{{Parameters.isSelect}} {{Parameters.value}} to {{Parameters.label}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#checkbox'),
('click', 'Click a element by id, css or xpath', (SELECT ID FROM category WHERE NAME = 'UI'), 'Click {{Parameters.value}|{Parameters.type}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#click'),
('coachControl', 'Set Coach Control value by control ID', (SELECT ID FROM category WHERE NAME = 'UI'), 'Set {{Parameters.value}} to coach control {{Parameters.label}|{Parameters.controlId}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#coachcontrol'),
('confirmCancel', 'Cancel the alert window', (SELECT ID FROM category WHERE NAME = 'UI'), 'Click the Cancel button of confirm dialog.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#confirmcancel'),
('confirmOK', 'Confirm the alert window', (SELECT ID FROM category WHERE NAME = 'UI'), 'Click the Ok button of confirm dialog.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#confirmok'),
('doubleClick', 'Double click a element by id, css or xpath', (SELECT ID FROM category WHERE NAME = 'UI'), 'Double click {{Parameters.value}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#doubleclick'),
('file', 'Set file element', (SELECT ID FROM category WHERE NAME = 'UI'), 'Upload file {{Parameters.value}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#file'),
('close', 'Close window', (SELECT ID FROM category WHERE NAME = 'UI'), 'Close window.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#close'),
('radio', 'Set radio control value', (SELECT ID FROM category WHERE NAME = 'UI'), 'Set {{Parameters.value}} to {{Parameters.label}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#radio'),
('saveCoachControl', 'Save Coach Control binding value into context. For complex binding value object, you can get the value by property', (SELECT ID FROM category WHERE NAME = 'UI'), 'Save the binding value of coach control {{Parameters.label}|{Parameters.controlId}} into system context with key {{Parameters.key}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#savecoachcontrol'),
('saveText', 'Save text into context', (SELECT ID FROM category WHERE NAME = 'UI'), 'Save the text of element {{Parameters.elementId}} into system context with key {{Parameters.key}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#savetext'),
('select', 'Set select control value', (SELECT ID FROM category WHERE NAME = 'UI'), 'Select {{Parameters.value}} to {{Parameters.label}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#select'),
('selectWindow', 'Select window by the window info', (SELECT ID FROM category WHERE NAME = 'UI'), 'Select window {{Parameters.info}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#selectwindow'),
('text', 'Set text control value', (SELECT ID FROM category WHERE NAME = 'UI'), 'Set {{Parameters.value}} to {{Parameters.label}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#text'),
('waitElement', 'Wait a element visible/hidden/editable/readonly', (SELECT ID FROM category WHERE NAME = 'UI'), 'Wait element {{Parameters.elementId}} {{Parameters.type}}', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#waitelement'),
('waitTextPresent', 'Wait the text display on the html', (SELECT ID FROM category WHERE NAME = 'UI'), 'Wait text {{Parameters.text}} present', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#waittextpresent'),
('ajaxGet', 'Process a AJAX Get request', (SELECT ID FROM category WHERE NAME = 'UI'), 'Get {{Parameters.url}} ', false, ''),
('ajaxPost', 'Process a AJAX Post request', (SELECT ID FROM category WHERE NAME = 'UI'), 'POST {{Parameters.url}} with data {{Parameters.postData}}', false, ''),
('ajaxPut', 'Process a AJAX Put request', (SELECT ID FROM category WHERE NAME = 'UI'), 'PUT {{Parameters.url}} with data {{Parameters.postData}}', false, ''),
('ajaxDel', 'Process a AJAX Delete request', (SELECT ID FROM category WHERE NAME = 'UI'), 'DELETE {{Parameters.url}} with data {{Parameters.postData}}', false, ''),
('clickActivityFromPortal', 'Click an activity from portal', (SELECT ID FROM category WHERE NAME = 'UI'), '{{Step.BpmUser}} launches Activity {{Parameters.activityName}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#clickactivityfromportal'),
('assertButtons', 'Asset button text', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the button {{Parameters.texts}} is {{Parameters.expectedVisibility}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertbuttons'),
('assertCheckbox', 'Assert checkbox value and options', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the checkbox {{Parameters.controlId}} checked labels are {{Parameters.checkedLabels}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertcheckbox'),
('assertCoachControl', 'Assert Coach Control binding value and visibility, it only supports String, Number, Date and Boolean type of binding value now. Either of controlId or label is required. The controlId is the coach view control id, label is the coach view label', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the control {{Parameters.label}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertcoachcontrol'),
('assertDatePicker', 'Assert Date Time Picker value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the date time picker {{Parameters.label}|{Parameters.controlId}} is {{Parameters.expectedDate}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertdatepicker'),
('assertElement', 'Assert the element value and visibility', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the element {{Parameters.elementId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertelement'),
('assertInputText', 'Assert Coach Text value, If you check the regular expression,it will use expected value as regular expression to match the actual value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the text {{Parameters.label}|{Parameters.controlId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertinputtext'),
('assertOutputText', 'Assert Output Text value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the output text {{Parameters.label}|{Parameters.controlId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertoutputtext'),
('assertRadio', 'Assert Radio value and options', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the radio group {{Parameters.controlId}} checked label is {{Parameters.checkedLabel}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertradio'),
('assertSelect', 'Assert Select value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the select {{Parameters.label}|{Parameters.controlId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertselect'),
('assertSwitch', 'Assert Switch Button value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the switch button {{Parameters.controlId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertswitch'),
('assertTableContent', 'Assert Table Content', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the table {{Parameters.controlId}} with row {{Parameters.rowNum}} and column {{Parameters.columnName}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttablecontent'),
('assertTableRows', 'Assert Table Rows', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the table {{Parameters.controlId}} has {{Parameters.expectedRows}} rows.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttablerows'),
('assertTextarea', 'Check Text area value', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the textarea {{Parameters.label}|{Parameters.controlId}} value is {{Parameters.expectedValue}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttextarea'),
('assertTextNotPresent', '', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the text {{Parameters.text}}  is not present.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttextnotpresent'),
('assertTextPresent', '', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the text {{Parameters.text}}  is present .', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttextpresent'),
('assertValidationPassed', 'Check whether the coach page is passed the validation or not', (SELECT ID FROM category WHERE NAME = 'UIAssertion'), 'Assert that the coach view page is pass validation', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertvalidationpassed'),
('open', 'Open an URL', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Open url {{Parameters.url}} .', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#open'),
('loginBPMoC', 'Login BPMoC, only support IBM Account and Local Account', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} login BPM on Cloud portal.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#loginbpmoc'),
('loginPortal', 'Login BPM Portal', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} login Portal.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#loginportal'),
('logoutPortal', 'Logout BPM Portal', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Logout Portal.', true, ''),
('openInstanceDetail', 'Open the instance detail page for current instance', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Open the instance detail page of current instance.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#openinstancedetail'),
('startProcess', 'Start a BPM process by REST API, only exposed process are supported by default. Install BPM IDA Toolkit to support all processes.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches the process {{Parameters.process}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startprocess'),
('startHumanService', 'Start a human service.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches the human Service {{Parameters.service}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#starthumanservice'),
('startExposedHeritageHumanService', 'Start a exposed heritage human service, please make sure the human service is exposed to a specify team.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches the exposed heritage human service {{Parameters.service}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startexposedheritagehumanservice'),
('startAjaxService', 'Start a ajax service by REST API', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches the AJAX service {{Parameters.service}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startajaxservice'),
('startSystemService', 'Start a system service by REST API, please install BPM IDA Toolkit to support system service.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches the system service {{Parameters.service}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startsystemservice'),
('executeSQL', 'Perform SQL Query by REST API, please install BPM IDA Toolkit to support SQL Query.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} executes sql {{Parameters.sql}} on database {{Parameters.dataSourceName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#executesql'),
('startUCA', 'Start a UCA', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches UCA {{Parameters.uca}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startuca'),
('startServiceFlow', 'Start a service flow by REST API, please install BPM IDA Toolkit to support system service.', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches service flow {{Parameters.service}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startserviceflow'),
('startAdHoc', 'Start AdHoc Event', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches AdHoc event {{Parameters.adHocName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startadhoc'),
('runAdHocActivity', 'Start AdHoc Activity', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches AdHoc activity {{Parameters.adHocActivityName}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#runadhocactivity'),
('runTaskByDisplayName', 'Run Task by Display Name', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches task {{Parameters.taskName}} by display name.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#runtaskbydisplayname'),
('runTaskByActivityName', 'Run Task by Activity Name', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} launches task {{Parameters.taskName}} by activity name.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#runtaskbyactivityname'),
('assignTask', 'Assign task to user', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} assigns task {{Parameters.taskName}} to {{Parameters.toUser}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assigntask'),
('claimTask', 'Start a task', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} claims task {{Parameters.taskName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#claimtask'),
('finishTask', 'Finish a task', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} finishes task {{Parameters.taskName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#finishtask'),
('addInstanceId', 'Add a process instance id to context, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set current instance id to {{Parameters.instanceId}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#addinstanceid'),
('getTaskIdByName', 'Get the task ID by name, use it by: ${context.currentTaskId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Get task ID by task name {{Parameters.taskName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#gettaskidbyname'),
('getLatestInstanceIdByProcess', 'Get the latest process instance id by process name, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set latest instance ID of process {{Parameters.processName}} into system context with key currentInstanceId', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#getlatestinstanceidbyprocess'),
('getInstanceIdByInstanceName', 'Get the process instance id by process name and instance name, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set instance id by instance name {{Parameters.instanceName}} into system context with key currentInstanceId.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#getinstanceidbyinstancename'),
('getInstanceIdByTaskName', 'Get the process instance id by process name and task subject name, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set instance ID by task name {{Parameters.taskName}} into system context with key currentInstanceId.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#getinstanceidbytaskname'),
('getInstanceIdByTaskUrl', 'Get the process instance id by the task id in url, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set instance ID by task url into system context with key currentInstanceId.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#getinstanceidbytaskurl'),
('getInstanceIdByBusinessData', 'Get the process instance id by process name and business data, use it by: ${context.currentInstanceId}', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Set instance ID by business data alias {{Parameters.businessDataAlias}} into system context with key currentInstanceId.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#getinstanceidbybusinessdata'),
('fireTimer', 'Fire timer for the current instance', (SELECT ID FROM category WHERE NAME = 'BPM'), '{{Step.BpmUser}} trigger a timer event on token {{Parameters.token}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#firetimer'),
('startRestApi', 'Check Rest API', (SELECT ID FROM category WHERE NAME = 'BPM'), 'REST API {{Parameters.apiName}} is invoked.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startrestapi'),
('startQuery', 'Performs a custom search.', (SELECT ID FROM category WHERE NAME = 'BPM'), 'Performs a custom search.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startquery'),
('assertProcessInstanceStatus', 'Check current process instance status', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the current process instance status is {{Parameters.instanceStatus}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertprocessinstancestatus'),
('assertProcessInstanceData', 'asset the data of current process instance', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the current process instance data is {{Parameters.expectedValue}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertprocessinstancedata'),
('assertTaskAssignmentByUser', 'Check  task is assigned to the correct user', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the task {{Parameters.taskName}} is assigned to {{Step.BpmUser}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttaskassignmentbyuser'),
('assertTaskStatus', 'Check the status of a BPM task for the current process instance', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the task {{Parameters.taskName}} status is {{Parameters.taskStatus}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttaskstatus'),
('assertNextTaskName', 'Check the next task name of current process instance', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the next task name is {{Parameters.taskName}} .', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertnexttaskname'),
('assertTaskNotGenerated', 'Check the task name of current process instance is not generated', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the task {{Parameters.taskName}} is not generated.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttasknotgenerated'),
('assertTaskData', 'Check the task data of current process instance', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the task {{Parameters.taskName}} data is {{Parameters.expectedValue}} .', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#asserttaskdata'),
('assertServiceData', 'Check the current service data', (SELECT ID FROM category WHERE NAME = 'BPMAssertion'), 'Assert that the current service data is {{Parameters.expectedValue}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertservicedata'),
('loginCaseClient', 'Login Case Client', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} launches Case Client with the solution {{Parameters.solution}}.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#logincaseclient'),
('addCase', 'Add a case based on the solution case type', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} adds a case {{Parameters.caseType}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#addcase'),
('addCaseFolderId', 'Add a case folder id to context, use it by: ${context.currentCaseFolderId}', (SELECT ID FROM category WHERE NAME = 'CM'), 'Sets current case folder id to {{Parameters.caseFolderId}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#addcasefolderid'),
('addActivity', 'Add a discretionary activity based on the activity type', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} adds a discretionary activity {{Parameters.activityTypeName}} named {{Parameters.activityName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#addactivity'),
('updateCaseData', 'Update current case data', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} updates a case {{Parameters.caseType}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#updatecasedata'),
('runFileNetP8ActivityByName', 'Run a FileNet P8 activity by name', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} launches a FileNet P8 activity {{Parameters.activityName}} by name.', true, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#runfilenetp8activitybyname'),
('startManualActivity', 'Start a manual activity', (SELECT ID FROM category WHERE NAME = 'CM'), '{{Step.BpmUser}} starts a manual activity {{Parameters.manualActivityName}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#startmanualactivity'),
('assertCaseState', 'Check current case state', (SELECT ID FROM category WHERE NAME = 'CMAssertion'), 'Assert the current case state is {{Parameters.caseState}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertcasestate'),
('assertActivityState', 'Check the activity state of the current case', (SELECT ID FROM category WHERE NAME = 'CMAssertion'), 'Assert the activity {{Parameters.activityName}} state is {{Parameters.activityState}}, the required activity state is {{Parameters.activityRequirdState}} and the disabled activity state is {{Parameters.activityDisabledState}}.', false, 'https://sdc-china.github.io/IDA-doc/references/references-test-command.html#assertactivitystate');


INSERT INTO command_parameter(DISPLAY_NAME, PARAMETER_NAME, PARAMETER_TYPE, PARAM_SOURCE, CHECKED, UNCHECKED, PARAM_REGEXP, HIDDEN, COMMAND_ID, TITLE) VALUES 
('Key', 'key', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addContext' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addContext' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Key', 'key', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'dateString' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Days', 'days', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'dateString' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Format', 'format', 'combo', 'getDateFormatList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'dateString' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Log', 'log', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'debug' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Key', 'key', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'putContext' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'putContext' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Time', 'time', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'wait' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Length', 'length', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'randomString' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Length', 'length', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'randomNumber' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'Utility')), ''),
('Case', 'caseId', 'combo', 'getTestCaseList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'groupCase' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'GroupCase')), ''),
('Value', 'value', 'combo', 'getFileNameList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'bpmFileDropzone' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'bpmFileDropzone' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'combo', 'getFileNameList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'bpmFileUploader' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'bpmFileUploader' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Select Options', 'isSelect', 'combo', 'getCheckboxSelectTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'checkbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'click' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Type', 'type', 'combo', 'getClickTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'click' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'click' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'click' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'click' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value Type', 'valueType', 'combo', 'getValueTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Default Value', 'defaultValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'coachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'doubleClick' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'doubleClick' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'doubleClick' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'doubleClick' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'combo', 'getFileNameList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'file' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'file' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'file' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'file' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'radio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Key', 'key', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Property', 'property', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), 'Save the property of coach control binding value'),
('Key', 'key', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'saveText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'select' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Info', 'info', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'selectWindow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Value', 'value', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'text' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Type', 'type', 'combo', 'getWaitElementTypes', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Timeout', 'timeout', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Text', 'text', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitTextPresent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Timeout', 'timeout', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'waitTextPresent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('URL', 'url', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxGet' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('URL', 'url', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxPost' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Post Data', 'postData', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxPost' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('URL', 'url', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxPut' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Post Data', 'postData', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxPut' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('URL', 'url', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxDel' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Post Data', 'postData', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'ajaxDel' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Activity', 'activityName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'clickActivityFromPortal' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Process', 'processName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'clickActivityFromPortal' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Track', 'trackName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'clickActivityFromPortal' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UI')), ''),
('Texts', 'texts', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertButtons' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Visibility', 'expectedVisibility', 'combo', 'getButtonVisibilities', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertButtons' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Checked Labels', 'checkedLabels', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Options', 'expectedOptions', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCheckbox' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Ignore Expected Value', 'ignoreValue', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value Type', 'expectedValueType', 'combo', 'getValueTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Visibility', 'expectedVisibility', 'combo', 'getVisibilityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCoachControl' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Date', 'expectedDate', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertDatePicker' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Visibility', 'expectedVisibility', 'combo', 'getVisibilityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertElement' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'text', '', '', '', 'true', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Max Length', 'expectedMaxLength', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertInputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertOutputText' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Checked Label', 'checkedLabel', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Options', 'expectedOptions', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertRadio' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Options', 'expectedOptions', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSelect' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'combo', 'getSwitchValues', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertSwitch' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableContent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Column Name', 'columnName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableContent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Column Number', 'columnNum', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableContent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Row Number', 'rowNum', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableContent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableContent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableRows' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Rows', 'expectedRows', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTableRows' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Control ID', 'controlId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Label', 'label', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element ID', 'elementId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Element CSS', 'elementCss', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('XPATH', 'xpath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Expected Value', 'expectedValue', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextarea' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Text', 'text', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextNotPresent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('Text', 'text', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTextPresent' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'UIAssertion')), ''),
('URL', 'url', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'open' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Process', 'process', 'combo', 'getProcessList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startProcess' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getProcessInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startProcess' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startProcess' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Service', 'service', 'combo', 'getHumanServiceList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getHumanServiceInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Service', 'service', 'combo', 'getHeritageHumanServiceList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startExposedHeritageHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getServiceInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startExposedHeritageHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startExposedHeritageHumanService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Exception', 'exception', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Service', 'service', 'combo', 'getAjaxServiceList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getServiceInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Output', 'expectedOutput', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Run and Fill in Expected Output'),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Json Path', 'jsonPath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Use json path to extract the output value or sub json'),
('Variable Name', 'variableName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAjaxService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Save Output into memory'),
('Exception', 'exception', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Service', 'service', 'combo', 'getSystemServiceList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getServiceInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Output', 'expectedOutput', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Run and Fill in Expected Output'),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Json Path', 'jsonPath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Use json path to extract the output value or sub json'),
('Variable Name', 'variableName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startSystemService' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Save Output into memory'),
('SQL', 'sql', 'textarea', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Max Rows', 'maxRows', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Rows', 'expectedRows', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Data Source', 'dataSourceName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Output', 'expectedOutput', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Run and Fill in Expected Output'),
('Json Path', 'jsonPath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Use json path to extract the output value or sub json'),
('Variable Name', 'variableName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'executeSQL' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Save Output into memory'),
('UCA', 'uca', 'combo', 'getUCAList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startUCA' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getUCAInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startUCA' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startUCA' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Exception', 'exception', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Service', 'service', 'combo', 'getServiceFlowList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', 'getServiceInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Output', 'expectedOutput', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Run and Fill in Expected Output'),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Json Path', 'jsonPath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Use json path to extract the output value or sub json'),
('Variable Name', 'variableName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startServiceFlow' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Save Output into memory'),
('Ad Hoc Name', 'adHocName', 'combo', 'getAdHocList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startAdHoc' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Ad Hoc Activity Name', 'adHocActivityName', 'combo', 'getAdhocActivityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runAdHocActivity' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Activity Name', 'activityName', 'combo', 'getBpmActivityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runTaskByDisplayName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runTaskByDisplayName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('byTaskOwner', 'byTaskOwner', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'runTaskByDisplayName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runTaskByActivityName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('byTaskOwner', 'byTaskOwner', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'runTaskByActivityName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assignTask' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('To User', 'toUser', 'combo', 'getUserNameList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assignTask' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'claimTask' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'finishTask' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Output', 'output', 'json', 'getTaskOutputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'finishTask' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Instance ID', 'instanceId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addInstanceId' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'combo', 'getAvailableTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getTaskIdByName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Process Name', 'processName', 'combo', 'getProcessList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getLatestInstanceIdByProcess' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'getLatestInstanceIdByProcess' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Process Name', 'processName', 'combo', 'getProcessList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByInstanceName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByInstanceName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Instance Name', 'instanceName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByInstanceName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Process Name', 'processName', 'combo', 'getProcessList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Name', 'taskName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Task Status', 'taskStatus', 'combo', 'getTaskStatus', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Current User', 'currentUser', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Process Name', 'processName', 'combo', 'getProcessList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByBusinessData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Toolkit Name', 'toolkitName', 'text', '', '', '', '', 'true', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByBusinessData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Business Data Alias', 'businessDataAlias', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByBusinessData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Business Data Value', 'businessDataValue', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'getInstanceIdByBusinessData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Token', 'token', 'combo', 'getTokenList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'fireTimer' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('API Name', 'apiName', 'combo', 'getRestApiListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startRestApi' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Params', 'params', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startRestApi' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Expected Value', 'expectedValue', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startRestApi' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Columns', 'columns', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Valid column names are taskId, instanceId, bpdName, taskSubject, taskArrived, taskStarted, taskFinished, eg: taskId,instanceId.'),
('Condition', 'condition', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Query condition: "<field>|<value>" or "<field>|<op>|<value>"'),
('Sort', 'sort', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Name of primary sort column'),
('Second Sort', 'secondSort', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Name of secondary sort column'),
('Organization', 'organization', 'combo', 'getOrganizationFilterList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'A string indicating how the results should be organized. Valid values are byTask and byInstance. The default value is byInstance.'),
('Size', 'size', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Specifies the maximum number of entities to be returned. If a number is not specified, the default size defined for the query will be used.'),
('Offset', 'offset', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Specifies the number of entities to be skipped. Offset 0 refers to the first entity from the result set.If this parameter is not specified, the default value of 0 is used.'),
('Filter By Current User', 'filterByCurrentUser', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), ''),
('Result', 'result', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Query result'),
('Json Path', 'jsonPath', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Use json path to extract the output value or sub json'),
('Variable Name', 'variableName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startQuery' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPM')), 'Save Output into memory'),
('Instance Status', 'instanceStatus', 'combo', 'getInstanceStatusList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertProcessInstanceStatus' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Expected Value', 'expectedValue', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertProcessInstanceData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Name', 'taskName', 'combo', 'getTaskListByActivityName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskAssignmentByUser' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Name', 'taskName', 'combo', 'getTaskListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskStatus' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Status', 'taskStatus', 'combo', 'getTaskStatus', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskStatus' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Name', 'taskName', 'combo', 'getTaskListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertNextTaskName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Name', 'taskName', 'combo', 'getTaskListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskNotGenerated' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Task Name', 'taskName', 'combo', 'getTaskListByDisplayName', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Expected Value', 'expectedValue', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertTaskData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Expected Value', 'expectedValue', 'json', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertServiceData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'BPMAssertion')), ''),
('Solution', 'solution', 'combo', 'getSolutionList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'loginCaseClient' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Case Type', 'caseType', 'combo', 'getCaseTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addCase' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Params', 'params', 'json', 'getCaseInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addCase' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Case Folder ID', 'caseFolderId', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addCaseFolderId' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Activity Type Name', 'activityTypeName', 'combo', 'getDiscretionaryActivityTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addActivity' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Activity Name', 'activityName', 'text', '', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'addActivity' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), 'Input the activity name'),
('Case Type', 'caseType', 'combo', 'getCaseTypeList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'updateCaseData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Params', 'params', 'json', 'getCaseInputs', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'updateCaseData' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Role Name', 'roleName', 'combo', 'getRoleNameList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runFileNetP8ActivityByName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Activity Name', 'activityName', 'combo', 'getFileNetP8ActivityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'runFileNetP8ActivityByName' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Manual Activity Name', 'manualActivityName', 'combo', 'getManualActivityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'startManualActivity' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CM')), ''),
('Case State', 'caseState', 'combo', 'getCaseStateList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertCaseState' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CMAssertion')), ''),
('Activity Name', 'activityName', 'combo', 'getActivityList', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertActivityState' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CMAssertion')), ''),
('Activity State', 'activityState', 'combo', 'getActivityState', '', '', '', '', (SELECT ID FROM command WHERE NAME = 'assertActivityState' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CMAssertion')), ''),
('Activity Is Requird', 'activityRequirdState', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'assertActivityState' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CMAssertion')), ''),
('Activity Is Disabled', 'activityDisabledState', 'checkbox', '', 'true', 'false', '', '', (SELECT ID FROM command WHERE NAME = 'assertActivityState' AND CATEGORY_ID = (SELECT ID FROM category WHERE NAME = 'CMAssertion')), '');

INSERT INTO settings(NAME, VAL) values ('version', '21.2.0');

INSERT INTO pipeline_template (name, code, content, image) VALUES 
('Dev to Test template', 'dev-test', '[{ "index": "0", "name": "Development", "type": "DEV", "steps": [{ "stageIndex": "0", "name": "Snapshot", "type": "Snapshot", "namingConvertion": "{MAJOR.MINOR.PATCH} - {APP_ACRONYM} {TRACK} {yyyyMMddHHmmss}" }, { "stageIndex": "0", "name": "Checkstyle", "type": "Checkstyle", "healthScoreThreshold": "20", "warningsThreshold": "200", "ignoreDocCheck": "true", "ignoreJsCheck": "true", "ignoreToolkitsCheck": "true", "haltOnFailure": "true" }, { "stageIndex": "0", "name": "Test", "type": "Test" }] }, { "index": "1", "name": "Test", "type": "QA", "steps": [{ "stageIndex": "1", "name": "Deployment", "type": "Deployment", "ignoreValidationError": "true", "offlineInstall": "false" }, { "stageIndex": "1", "name": "Test", "type": "Test", "tip": "true" }] }]', ''),
('Dev to Stage template', 'dev-test-stage', '[{ "index": "0", "name": "Development", "type": "DEV", "steps": [{ "stageIndex": "0", "name": "Snapshot", "type": "Snapshot", "namingConvertion": "{MAJOR.MINOR.PATCH} - {APP_ACRONYM} {TRACK} {yyyyMMddHHmmss}" }, { "stageIndex": "0", "name": "Checkstyle", "type": "Checkstyle", "healthScoreThreshold": "20", "warningsThreshold": "200", "ignoreDocCheck": "true", "ignoreJsCheck": "true", "ignoreToolkitsCheck": "true", "haltOnFailure": "true" }, { "stageIndex": "0", "name": "Test", "type": "Test" }] }, { "index": "1", "name": "Test", "type": "QA", "steps": [{ "stageIndex": "1", "name": "Deployment", "type": "Deployment", "ignoreValidationError": "true", "offlineInstall": "false" }, { "stageIndex": "1", "name": "Test", "type": "Test", "tip": "true" }] }, { "index": "2", "name": "Stage", "type": "STG", "steps": [{ "stageIndex": "2", "name": "Deployment", "type": "Deployment", "ignoreValidationError": "true", "offlineInstall": "false" }, { "stageIndex": "2", "name": "Test", "type": "Test", "tip": "true" }] }]', ''),
('Test only template', 'test-only', '[{ "index": "0", "name": "Development", "type": "DEV", "steps": [{ "stageIndex": "0", "name": "Test", "type": "Test", "tip": "true" }] }]', 'iVBORw0KGgoAAAANSUhEUgAAAHAAAABuCAYAAAD/PJegAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAABIcSURBVHhe7Z0HfBRl3sd/2/sm9KMnICWgEJAe3gMUFQRFiBzqB0Hs7xsQLGfXU88Tj/dUsCBYqO8hisgpgpwfBBUpBwiRkkCEkAKkt022zu7O+//PbiBLQg+QWeabz2Rnnnl2Zvb5ztOmqkQCCrJFHf5UkCnnnQOr3F4czMrDml9+Q3pWAXILSuD2+sJzFc4Hk0GPti0aIyGuJUYN7oEu9Gk1GcJzz41zFlhe6cSi1Zvxzc+pyMorhk6nhU6jhoYGFf0pnD8i/QUCQQg8CH7EtWyK2/+YiPtuS0KszRKOdWbOSeBXG3dh9mffo7DUAT2J07I0lSKtPmENfhLpI5HNG9sx4+6bMW5Y7/Dc03NWgW8uWoN5X/0Iu8WkiLsMVIt0ON14dNxQPHvfqPCcujmjwOc/WIlVP+6CUa+DWq2Iu5wEgyI8PgFjh/bGGynJ4dDanLYV+s5n/8bStVtgNCjyrgSc5pz27OAdqr5OR50Ct+8/IjVYmsRaoVaKzCsGpz07WLz6F8lJXdQpcOaib+H3BxV5DQB2IJALdlIXtQRu3nMIO8i2Qa9VGiwNAHbALjgHbiE3p1JL4BIqOu1WkyKvAcEuYsjJYnJzKhECi8orsf/IMei0mnCIQkOBnbAbdlSTCIGHcgrh8QpK3dcAYSfshh3VJEJgdn4JXF6fUnw2QNgJu2FHNYkQWOXySEcB6ptg0IOikgoU1BhKq/wIUGe1PnBUOFBY7qq35V0MPkrkUsel2RZ2w45qEiEwECR5olivOZDlqTS3ImPt2zhaY1iZ0oSaxyKEgEhdFj+ctGGVNLj8AWk7XDTu9oV2Jp/Phyq3j+LSNtI4x+PBSwEs751FbyH3n/dDqwoiQMtyuUPzK+k7IQJSmNPtlRKg0uWVEiMQCEjr5XCOX+URTmwLr49a74QInxD5PfpR8Ho4zHtiu3lbXFVOtO/VB1vnP4CgQNtbjxIlJ+RGclQDzStEeBy7DmRTU/Ww1GytL4KiQP8TMHVcW5RvTcXC7enYLloxZsCN6BdbjNXbs2Fu2gKTxgzBsN7xaFNYggwv8OA9IxEfzMLOHCcS+/fFlCHtUJCTjuK2A/DkrT2QdF0HwFmEPdkVuHPiSFyjL8e8lTtRbGyCiaOTMOL6zrihayxWbMmACu0x5e5+6NGuFZISu+Kmnq2w7/Bx6K0xmHjHMHRvEYOhST3Ru4UavxYG8PCdN2JgnAG5x3JR6FCjS5eBmDSqO4Z1a4n0zOMoU5tx4/DBGNWjKbp0vRa39OmAQEUenM06YcWrd6GZVQvB4UDOgXy4dJrIXHIR+GgnSerZCdcnxIVDgPozdUZCe2LOd5vw4s4sqAzr0Wvx3zDo+uZoalPjr6/PwKDGUhRgRHdUTFuC1qMGYHq3cry1fh8mJI/DWEsaVm2pwOevJKO7LhT1vsEWZM5YQHs/T1Fu0pswOeV+vNo3VprPdIlVI+UNN6aQlBbhMCa5px03z01DyrjBMIbDgMEYO7YS7ZvH0PhAxBcX4fWDfbD09UGwhSJgQu9YtHhhG4aPuRF3NAkHEmM7B/BJUWuEfkYMHhudiG1fp6LIpMelbNPX185xTmgNBtisZjQSXPgt3w9Y42CMnyzJ27pwJR754FuU6JtjylgDflyQCVzTF/9zSyx6UmZbt349TD27kTwvli57F5Ne2wdts354rnlHOKloRdCPNo06S/Kyv14GVZ8/44Hv89H/loFIvF6LKopS+dvX6DgqBQ9tqoStU19MpGLQQeEHNixEm+e+hJOSw79jPRrf9TWFqnENzOg59TqSV4wnZi3GrJW5MHUYhBdjvSjjqqjyMMaOfgof7POiSaeW+GHem1heTOFVaWj/0AL8ZjNBT5OXkssqMEj1i1cQ4Kb6qDkVM3DnIpgoZR8MnJKM+SmjwTt1fLue+KZkLyVuE6SMHQjyhx+W70UbGxcYBtx7z2NY8vK1/DX0SDLAH86BalUXaW9P/ep3tGruxoIjOTRlh1bbXDrlXLTHD6PTAPcmDjfQ0kMlQ2V5Okp0BnCNme5zw5MTqmc8VN/8Uc9LbIq3n56Mp5PbSuFxI0TeX6j15ISbhjyq+3hReqMZJo6u1sBmvLQ5r5rLKtAS1xqDurZF30kPIbkVkLY2FyUfH5bm/fL+/2HYtLdxxzPzcNfbaxD44Si25QqI69YdyNuE+S4LMso4iT348KM3MXzaHNz5zLvovyQLjU0UrNLD4f030ighx7wzDtd1HISNI/pRxZGN0oJMqouBDsnXYOitnTE0hZaJQmxRqcGlsVqthYYaCSxZq1ZDrQ014oz0uSCdO85FePDl9zFy+hyMf342/rLCAiuXu/R9viJBU+NsjY4XqLWgb+eWiOEGWSj4knFZBKrUoes84iePwcqZKVg1uTecmavx+KZMlBu2Ys6PhzF46kRsfO8J/Ovvo6lRoYfZdBhzdxdI3zuwbj8ax5ix7+dNmPO7Fv/98LNY/950fPnsbehq0MBip0hWC5wVLkxftAtofB3WvXcPhrYXkfLat9idY4ae0tip74kPnn4UD1IVt2L5euyyWdCIvhpromTQ6cE1p83EBkIFX7NYC4oXr8OG7Gb45LWp+G7OdKwY1x8WylpWXqfdKO0AJouFMrQRFlrOfzaQMn0bLHx9IgY6vQiVL5eOiBO6H636Cf9Yug42y8lq/WIRxSANGpiMGukkJaOiPVfwVsEd0IFLKG6aW8xG2hiaGaR6yasCeYGg0lAaaeB1CQhQGqsCfnjUlNAGNZVYKqlL4RGCMFpMlJDUjKduAPc8LOGGgxpBFFVVweXsjx1rkyF+vRb3LtuGKosOVU4f9NRCNFG9HBTccAW1sBq01A2hIp4yutWqo00R4KIiX6UywGwM5TK/k7o6Wi0sep3UbXG7BWhoGQY1jVN8f4DmsWH6rT6fAJFy9Mn8eXFU0rqfuncEHh47JBxySg4MJe8Jn/UCy1KpuB/mk34gDy5qPPhpLzfqqLiiH8jH+Twen3Skwe1Xw6Cl73C4yP00nySPDyWptDpqMVIYiXJRfJ+ogpa6PAItz+nxS98x0nd9vA4aqrwBqot09CO1Uu5qQoK4o81xDSSPE5b7hx5aAemicS981DfVaUWS7qU6UKT6U0vr9sMtrVOAoNOCXQq087i8tE7a9gD1+XiZ1OGl+AGSSr+jnuWF4MugIokQSNlRinCGqywuCJbIdQVfU1M91Kw3uJNaPZ/Dq48jsBAOr3lslsNqLoPnqHmcBqmzW2NZPHBPKdaehrufm4sJ3+yGy2ygXB+KW71eaVvC46GrD8LhHIf+eCerXiaHcVwpLCyoen5oVmi8el59wU7YCjuqSYRAMxVjWg0XPtEE5S6dB5lH8pBZ7oLICR2eIzfYDTuqSYTApnYr9FQk1HMGbACwxNB1rHKVx07YDTuqSYTArvF/oMaEod6LUIWLh52wG3ZUkwiBfGVw0xhrrQOmClcedsJu2FFNIgQy44f3k47OKzQs2MmfyM2p1BI44aa+1GozU3/mUh9DUDhX2AU7GU9uTqWWQL73IeXOG6V+llIXXnnYAbtgJwZycyq1BDL33z4YNw3oLt1KpnBlYQc3kwt2UhenvTeCs+2AKX+TzkSbjXrqoMq1AS5PqnOelfp92xa+GD4oUZu6QwnuNP407xkkdmorVaBKcXr54LTmNOe0Zwenk8ecNgdWw1n4ydmfY92WvbBbQkdqQoeMlBxZn7AGNsEln8PpwYhB1+GtGRPOesfuWQVWs3FnOmYuWoO84goI/oB0AJqP91XfuaQIPT+qk53P0HAfrzpNWzaNwXP3jcKwPgnS/LNxzgKr+X7bPmzdcxi7M7JJpgMlFVXSymmTQhEaEFrp7Crt1cKlPit3IagkYU2oc87SenVuh4E9OlKDJXSlwbly3gKr4TtInW4fPD7fifN8DQmtVofdu3dL47169YI/dN1Fg0K6B1Cvl85f8h3QF8IFC5QDu37dKX32vr6P9BmNnL55EwXwmX7pQtwoJqoFXg0oAmWOIlDmKAJljiJQ5igCZY4iUOYoAmWOIlDmKAJljiJQ5igCZY4iUOYoAmWOIlDmKAJljiJQ5igCZY4iUOYoAmWOIlDmRFxW6PV64XK5wlPyhh8PkpqaKo0nJiZKj5GMBsxmMwyGk5fbRwhMT0+Xns1psVii4mYWlshEgzy+dcHpdEKv1yMh4eRl97UEtmvXThKo0PBggTk5ORECa9WB/BRbhYZJXW6URozMUQTKHEWgzFEEyhxFoMxRBMocRaDMUQTKHEWgzFEEyhyZCPQhN7cAh48VIbPmcLQQh/LKw3GuTmodzG7dujXsdn4pQkNBwJHvPseQmZtQGFSBnzolhh9rIooqqO1NsGDuc5gQX/0o4gD2/HQQS/MEmAw62NVBlHn8iLE3woyR7c/+KhzBiSXbizAp6eQLphoKDocDx44diziYzaeNTpCWliZWVFSEpxoKx8U5T7wkjp63WazyucW8wnLR4fKIZQ636K48LL75+Ivi7Z/uCMdlgmJVuVM8UuYRszZsEm/4IlMsrXCJR8u9NM8vljo8YrFLCEVl/IJYzGFuf2i65Kg4bOYGsSw01aBgN+yoJjIoQlVU0KtgMNlg0eXihSc+wLJ9eYi1GWG0WmHVqRF+U04YFSwxZsTFGtC+kR42uwmNaGgdU4llS7fj1S/3Y9qnm/HxLip6gyX4aOFW/HXVXjzy4c9Yub8MGYfyUFDmwacbj0MOZxFlUQfyY9hoZ6MxDdQ+B2bO+hTj31lH01Qgnum8MxW1wXANsffndBzp2BWzp/TGsqndkLM+DRkFpfgtEIvZk/rgyxmD0LeNDZ17d0DXNnY8OazV5Xo330Uhu1Yo6+CXf4Se4ncme5HkHHRg1U97cfe7v2D8uxlIM5jQuWUH/FcbD4a9/A0mLT6EfK5bA0HpraJyQRYCORPx21EoS0FlbITXXnoECx8dRtP8uhspylkxWrX402298dljg7HisSSsnN6LQjW4a1RfbHztBkyL8+GRubsAg1ZW75aQRxEaBJwVxcgrb46/zHoYN7W0ICe/DIWFJSjx8CveTpPkgQCobSKNJo2Ix/G1e/FTZgXSUjNw17ydcJZk489ztyM1n1+Vo0H3bvz2QhFWvw/7y32X/NVx9YEMuhEBHP3hCwx+ZSPyqc2lOVEf8id1I2KaYdn85zGmbR1P+8s/ji9ddtzZIdTFOH4oC8v3O+HSGXD/DR3RyhhExt4s/CvTA5/RjMdviYeFcnXOrhysrtRj0pA2J1692hCoqxshA4FMAKWlTgSkRwWHgxja9KBahxYxF/aoRrlRl0CZNGI0aNzYjmaNbGgWW2NoZL9q5J0O2bVCFSJRBMocRaDMUQTKHEWgzFEEyhxFoMyJXoGOfGzdnoZ5y1OxekcmvNFxe2AtZHIk5twJlh/H7EWpeOOgALtRDZVaBTEQhMcXxNAB1+B/x3dHa5OcDlefRMZHYs6Riiw8/u5uzD8K6WSuViOiNQ02nRYtYg34dXcmHvhoJ4pO7LLyJ4oEujH/431Y7VDBqlfB5QnigQlD8fOskfiwvw1BQYTFpENWVj5eWJXZAN/0dGFEj8Aj2fg0H7BpAafHj3KnH27pxKwIn+BHGU07fCIMejW27DuG1OKG+EKs86eWQI1GEx6TFwczyuEhX16dAU+O6YDFkzohuSNfg6ZFQt84fEzT/0iKhZ1+nqvYiT0OX+iLMqIuNxGNmLS0NOlcm7wecqCCwShg19psPLPPjRYJ8djw8Gle4ebMw+1v/Yr0MjWSh3fAU4kmVFLjRg5UP+SAP7t16xYOPUWg2+1GZWVleEouqKAzBHFofQbu3+qA2mLEmM4x0AWAPkkJGNnRhN//cwCfH3JD53Vj9eEK5FdpMO3eBDzYwQKnX14vx7LZbDCZTp5CixAoa7IPoP/7v8NDxQy/sazSFcRDk4fipX5mbPp8M+7b7IDOqIFRRXViTAy+mDoQ13J5KnOipxHTPg6TWwKl1DYx6jSwGDQwqPmqFgECSeNps1YFjxDAwIRWUSGPiZ4cyFAd9+zsnVhZqoaZWpt8/QzvoXy1oEh/Tm8Abdq1xJoZfRAt5/GjSyDhLy3AJ2vS8NGOchSrtJLEYDAIo16H0YM74vnbuqBJdGQ+iagTGMKPklIHdQ0LUeAMIqZpY3Rq1Qgt7Gd+pbcciVKBVw9RdCjtagT4f1yHECH77Se1AAAAAElFTkSuQmCC'),
('Checkstyle only template', 'checkstyle-only', '[{ "index": "0", "name": "Development", "type": "DEV", "steps": [{ "stageIndex": "0", "name": "Checkstyle", "type": "Checkstyle", "healthScoreThreshold": "20", "warningsThreshold": "200", "ignoreDocCheck": "true", "ignoreJsCheck": "true", "ignoreToolkitsCheck": "true", "haltOnFailure": "true", "tip": "true" }] }]', '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'),
('Deployment only template', 'deployment-only', '[{ "index": "0", "name": "Development", "type": "DEV", "steps": [] }, { "index": "1", "name": "Test", "type": "QA", "steps": [{ "stageIndex": "1", "name": "Deployment", "type": "Deployment", "ignoreValidationError": "true", "offlineInstall": "false" }] }]', '');

